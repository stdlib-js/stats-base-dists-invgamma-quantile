{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/factory.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaincinv = require( '@stdlib/math-base-special-gammaincinv' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~1.213\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~0.545\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* // Non-positive shape parameter:\n* var y = quantile( 0.5, -1.0, 1.0 );\n*\n* @example\n* // Non-positive rate parameter:\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\tisnan( p ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn beta / gammaincinv( p, alpha, true );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar gammaincinv = require( '@stdlib/math-base-special-gammaincinv' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~0.2298\n*\n* y = quantile( 0.8 );\n* // returns ~0.427\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn beta / gammaincinv( p, alpha, true );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution quantile function.\n*\n* @module @stdlib/stats-base-dists-invgamma-quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats-base-dists-invgamma-quantile' );\n*\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~4.481\n*\n* var myquantile = quantile.factory( 2.0, 2.0 );\n* y = myquantile( 0.8 );\n* // returns ~2.426\n*\n* y = myquantile( 0.4 );\n* // returns ~0.989\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uCAAwC,EAC/DC,EAAQ,QAAS,iCAAkC,EAkDvD,SAASC,EAAUC,EAAGC,EAAOC,EAAO,CACnC,OACCJ,EAAOG,CAAM,GACbH,EAAOI,CAAK,GACZJ,EAAOE,CAAE,GACTC,GAAS,GACTC,GAAQ,GACRF,EAAI,GACJA,EAAI,EAEG,IAEDE,EAAOL,EAAaG,EAAGC,EAAO,EAAK,CAC3C,CAKAL,EAAO,QAAUG,IC3FjB,IAAAI,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAc,QAAS,uCAAwC,EAC/DC,EAAQ,QAAS,iCAAkC,EAoBvD,SAASC,EAASC,EAAOC,EAAO,CAC/B,GACCH,EAAOE,CAAM,GACbF,EAAOG,CAAK,GACZD,GAAS,GACTC,GAAQ,EAER,OAAOL,EAAkB,GAAI,EAE9B,OAAOM,EAaP,SAASA,EAAUC,EAAI,CACtB,OAAKL,EAAOK,CAAE,GAAKA,EAAI,GAAOA,EAAI,EAC1B,IAEDF,EAAOJ,EAAaM,EAAGH,EAAO,EAAK,CAC3C,CACD,CAKAL,EAAO,QAAUI,ICpCjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAU,IAKdF,EAAaC,EAAM,UAAWC,CAAQ,EAKtC,OAAO,QAAUD",
  "names": ["require_main", "__commonJSMin", "exports", "module", "gammaincinv", "isnan", "quantile", "p", "alpha", "beta", "require_factory", "__commonJSMin", "exports", "module", "constantFunction", "gammaincinv", "isnan", "factory", "alpha", "beta", "quantile", "p", "setReadOnly", "main", "factory"]
}
